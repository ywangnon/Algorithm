/*:
 # 피보나치 수
 
 ## 문제 설명
 
 피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.
 
 예를들어
 
 F(2) = F(0) + F(1) = 0 + 1 = 1
 F(3) = F(1) + F(2) = 1 + 1 = 2
 F(4) = F(2) + F(3) = 1 + 2 = 3
 F(5) = F(3) + F(4) = 2 + 3 = 5
 와 같이 이어집니다.
 
 2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.
 
 ## 제한 사항
 
 * n은 1이상, 100000이하인 자연수입니다.
 
 ## 입출력 예
 
 n    return
 3    2
 5    5
 입출력 예 설명
 
 피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.
 */

import UIKit

func solution(_ n:Int) -> Int {
    return fibonacci(n) % 1234567
}

func fibonacci(_ n: Int) -> Int {
    var m1 = 1
    var m2 = 0
    var ans = 0
    for _ in 2...n {
        ans = m1 + m2
        m2 = m1 % 1234567
        m1 = ans % 1234567
    }

    return ans
}

/********************************************
 원래는 재귀로 풀었는데 시간초과로 오류가 났다.
 한번만 계산하도록 배열로 풀었는데, 배열이 너무 큰지 오류가 났다.
 원하는 피보나치의 답만을 구하도록 했는데 숫자가 너무 커서인지 오류가 났다.
 결국에 원하는 것은 나머지값이라는 생각에 나머지들의 계산을 한 후, 마지막에 다시 한번 1234567로 나눠주어 값을 구했다.
 ********************************************/

print("\n---------- [ 다른 사람의 풀이 ] ----------\n")

func solution2(_ n:Int) -> Int {
    var v1: Int = 0
    var v2: Int = 1
    
    for _ in 2...n {
        let v = v1 + v2
        v1 = v2
        v2 = v % 1234567
    }
    
    return v2
}

/********************************************
 사실 ans를 사용하지 않아도 될 것 같다고는 생각했는데, 생각이 꼬여 역할이 확실하게 각각의 역할이 있게 ans를 넣었다.
 참고로 m1: n-1, m2: n-2, ans: n, 결과값 의 의미로 변수를 만들었다.
 풀이를 보니 더한 값을 생성하고 한자리씩 땡긴다고 생각하면 편했을 것 같다.
 ********************************************/
